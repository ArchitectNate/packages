syntax = "proto3";
package chat;

option go_package = "gRPCChat";
option java_package = "io.getcouragenow.chat";

/// instance message operation type enum define
enum imOp {

    // OpGetRooms get all rooms that current member can access
    OpGetRooms = 0;
    // OpGetRooms get all rooms reply
    OpGetRoomsReply = 1;

    // OpChangeRoom change room
    OpChangeRoom = 3;
    // OpChangeRoomReply change room reply
    OpChangeRoomReply = 4;

    // OpSub subscribe operation
    OpSub = 5;
    // OpSubReply subscribe operation
    OpSubReply = 6;

    // OpUnsub unsubscribe operation
    OpUnsub = 7;
    // OpUnsubReply unsubscribe operation reply
    OpUnsubReply = 8;

    // for dev debug only
    OpTrace = 9;
}

/// client side message for instance message operations
message RawPayload {
    int32 ver = 1;
    imOp protoOp = 2;
    int64 tid = 3;
    int32 seq = 4;
    bytes body = 5;
}

message Result {
    int64 tid = 1; // transaction id for async call
    int32 status = 2;
    bytes message = 3;
}

enum MsgPushType {
    CMD = 0; // raw message like  subscribe  / un-subscribe
    PUT = 1; // instance message between 2 members
    PUSH = 2; // instance message to groups of members
    ROOM = 3; // instance message to chat room
    BROADCAST = 4; // instance message from server side  be broadcast to groups of room
}

/// chat message / segmentation , if instance message is to long ( more then 4K ), it's must be split into serial seg
message ChatMsg {
    MsgPushType pushType = 1;
    int64 Tid = 2; // transaction id
    int32 seq = 3; // sequence of  message segmentation
    int32 pack = 4; // total of message segmentation
    int64 from = 6;
    repeated int64 To = 7; // is pushType = PUT, To is member id , others To is temporary group id / room id ....
    bytes body = 8;
}

/// server side push message
message PushMsg {
    MsgPushType type = 1;
    int64 Tid = 2; // transaction id
    int32 speed = 3;
    int64 server = 4;
    int64 room = 5;
    repeated int64 keys = 6;
    bytes msg = 7;
}

// The greeting service definition.
service ChatService {

    rpc Send (RawPayload) returns (Result) {
    }
    // Sends a msg to server
    rpc Publish (ChatMsg) returns (Result) {
    }

    // subscribe
    rpc Subscribe (RawPayload) returns (ChatMsg) {
    }
}